def transform(graph, path_len = None):
    row_weights = {}
    column_weights = {}
    for i in graph:
        if row_weights.get(i[0]) is None or row_weights.get(i[0]) > i[2]:
            row_weights[i[0]] = i[2]
    for i in graph:
        if column_weights.get(i[1]) is None or column_weights.get(i[1]) > i[2] - row_weights[i[0]]:
            column_weights[i[1]] = i[2] - row_weights[i[0]]
    for i in graph:
        i[2] -= (row_weights[i[0]] + column_weights[i[1]])
    path_len += sum(row_weights.values()) + sum(column_weights.values())
    return graph, path_len


def find_zeros(graph, path):
    zeros = []
    for i in graph:
        if i[2] == 0:
            n = 0
            for j in graph:
                if (j[0] == i[0] and j[1] != i[1]) or (j[0] != i[0] and j[1] == i[1]):
                    n += j[2]
            zeros.append([i[0], i[1], n])
    max_el = max(zeros, key=lambda x: x[2])
    path.append([max_el[0], max_el[1]])
    graph = remove_items(graph, max_el[0], max_el[1])
    graph = ban_elem(graph)
    return graph, path


def remove_items(graph, row, column):
    to_remove = []
    for i in graph:
        if i[0] == row or i[1] == column:
            to_remove.append(i)
    for i in to_remove:
        graph.remove(i)
    return graph


def ban_elem(graph):
    rows = {}
    columns = {}
    for i in graph:
        if rows.get(i[0]) is None:
            rows[i[0]] = 0
        if columns.get(i[1]) is None:
            columns[i[1]] = 0
        rows[i[0]] += 1
        columns[i[1]] += 1
    top_row = list(rows.keys())[list(rows.values()).index(max(rows.values()))]
    top_column = list(columns.keys())[list(columns.values()).index(max(columns.values()))]
    for i in graph:
        if i[0] == top_row and i[1] == top_column:
            graph.remove(i)
            break
    return graph

graph = [[1, 2, 41], [1, 3, 80], [1, 4, 23], [1, 5, 32], [2, 3, 45],
         [2, 4, 12], [2, 5, 37], [3, 4, 50], [3, 5, 64], [4, 5, 67]]
reverse_graph = []
for i in graph:
    reverse_graph.append([i[1], i[0], i[2]])
graph += reverse_graph

path_len = 0
path = []
while len(graph) != 2:
    graph, path_len = transform(graph, path_len)
    graph, path = find_zeros(graph, path)
for i in graph:
    path.append([i[0], i[1]])
answer = []
while len(answer) != len(path):
    if answer == []:
        answer.append(path[0])
        continue
    for i in path:
        if i[0] == answer[-1][1]:
            answer.append(i)
            break
print(f"Путь: {answer}")
print(f"Длина пути: {path_len}")
