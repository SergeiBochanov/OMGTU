import math

peaks = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
graph = [[1, 2, 7], [1, 5, 9], [1, 6, 2], [2, 3, 5], [2, 4, 4], [2, 5, 8], [2, 6, 2], [3, 4, 2], [3, 5, 9], [4, 5, 3],
         [4, 7, 8], [4, 8, 3], [5, 6, 3], [5, 7, 5], [5, 8, 1], [5, 9, 7], [6, 8, 6], [6, 9, 1], [7, 8, 6], [7, 10, 4],
         [7, 11, 4], [8, 9, 2], [8, 10, 7], [8, 11, 8], [8, 12, 5], [9, 11, 6], [9, 12, 1], [10, 11, 10], [11, 12, 3]]
reverse_graph = []
for i in graph:
    reverse_graph.append([i[1], i[0], i[2]])
graph += reverse_graph
graph.sort(key=lambda x: x[0])
matrix = [[[math.inf, 0]] * len(peaks) for i in range(len(peaks))] #[путь / прош.вершина]
for i in graph:   #Заполнение матрицы
    matrix[i[0]-1][i[1]-1] = [i[2], i[0]]
for p in peaks:
    for i in peaks:
        for j in peaks:
            if i == j: continue
            if min(matrix[i-1][j-1][0], matrix[i-1][p-1][0] + matrix[p-1][j-1][0]) != matrix[i-1][j-1][0]:
                matrix[i-1][j-1] = [matrix[i-1][p-1][0] + matrix[p-1][j-1][0], matrix[p-1][j-1][1]]
start = int(input("Введите стартовую вершину: "))
finish = int(input("Введите конечную вершину: "))
if start == finish:
    print("Это одна и та же вершина")
else:
    print(f"Длина минимального пути: {matrix[start-1][finish-1][0]}")
    path = str(finish)
    previous_value = matrix[start-1][finish-1][1]
    while True:
        path = str(previous_value) + "-" + path
        if previous_value == start:
            break
        previous_value = matrix[start-1][previous_value-1][1]
    print("Путь: " + path)
